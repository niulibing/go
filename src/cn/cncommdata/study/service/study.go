package service

/**
 * 1。GO语言在命名的时候，一般会在单词后面添加er，如有写操作的接口叫writer，有字符串功能叫stringer，又关闭功能的 接口叫closer
 * 2.方法名：当方法名首字母大写时，且这个接口类型名首字母也是大写是，这个方法可以被接口所在的包之外的代码访问
 * 3. 参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以被忽略
 *
 */
type writer interface {
	Writer([]byte) error
}

/**
 * 开发中常见的接口及写法
 * 这个接口可以调用Writer()方法写入一个字节数组，返回值告诉写入字节数，和可能发生的错误
 */
type Writer interface {
	Write(p []byte) (n int, err error)
}

/**
 * stringer 接口在Go语言中的使用频率非常高，功能类似于Java 语言里的ToString方法
 * Go语言的每个接口中的方法数不会很多。Go语言希望通过一个接口精准描述它自己的功能，而通过多个接口的嵌入和组合的方式将简单的接口扩展为复杂的接口。
 * 本章后面的小结中会介绍如何使用组合来扩充接口
 */
type Stringer interface {
	String() string
}

/**
 * 如果一个任意类型T的方法集为一个接口类型的方法集的超集，则我们说类型T实现此接口的类型。T可以是一个非接口类型，也可以是一个接口类型
 * 实现关系在go语言中是隐式。两个类型之间的实现关系不需要在代码中显示地表示出来。Go语言中没有类似于implement的关键字，go编译器将自动在需要的时候检查两个类型之间的实现关系
 * 接口定义后，需要实现接口，调用方法才能正确编译通过并使用接口，接口的实现需要遵循两条规则才能让接口可用
 * 1。接口被实现的条件一：接口的方法与实现接口的类型方法格式一致

在类型中添加与接口签名一致的方法就可以实现该方法。签名包括方法中的名称、参数列表、返回参数列表。也就是说，只要实现接口类型中的方法的名称、参数列表、返回参数列表中的任意一项与接口要实现的方法不一致，那么接口的这个方法就不会被实现。
 * 为了抽象数据写入的过程，定义DataWriter 接口来描述数据写入需要实现的方法，接口中的WriteData()方法表示将数据写入。写入方法无须关心写入到那里。实现接口的类型实现WriteData方法时，会具体编写到什么结构中
 * 这里使用file结构体实现DataWriter接口的WriterData方法，方法内部只是打印一个日志，表示有数据写入

2.接口被实现的条件二：接口中的所有方法被实现
*/

//定义一个数据写入器
type DataWriter interface {
	//写入数据
	WriteData(data interface{}) error

	//能否写入
	CanWrite(bo interface{}) bool
}

//定义文件结构体，用于实现DataWriter
